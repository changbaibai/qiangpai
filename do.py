import threading
import search
import input
import mouse
import directkeys
import time
lockA=threading.Lock()
lockB=threading.Lock()
lockC=threading.Lock()
lockD=threading.Lock()
lockE=threading.Lock()
lockF=threading.Lock()
lockG=threading.Lock()
lockH=threading.Lock()
lockI=threading.Lock()
lockJ=threading.Lock()
def denter():
    directkeys.enter()
    time.sleep(0.01)
    directkeys.enter()
def chushi():
    directkeys.f10()
    time.sleep(1)
    mouse.moren()
    time.sleep(1)
    mouse.dianji()
    time.sleep(1)
def A(n):
    if n < 0:
        return
    lockA.acquire()
    chushi()
    str = 'nongsuode'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(1)
    str = 'yj'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 11000< a <= 110000:
        denter()
        print("浓缩的异界精华",a)
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(2)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(2)

    time.sleep(1)
    lockB.release()
    time.sleep(1)
    A(n-1)

def B(n):
    if n < 0:
        return
    lockB.acquire()
    chushi()
    str = 'xingkong'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(1)
    str = 'shenyuan'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 9000< a <= 90000:
        print("星空原石",a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(2)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(2)
    time.sleep(3)
    lockC.release()
    time.sleep(1)
    B(n - 1)

def C(n):
    if n < 0:
        return
    lockC.acquire()
    chushi()
    str = 'qiangliezhi'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(1)
    str = 'henji'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 17000< a <= 170000:
        print("强烈之痕", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)

    time.sleep(3)
    lockD.release()
    time.sleep(1)
    C(n - 1)


def D(n):
    if n < 0:
        return
    lockD.acquire()
    chushi()
    str = 'maodun'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 10000< a <= 100000:
        print("矛盾", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    time.sleep(3)
    lockE.release()
    time.sleep(1)
    D(n - 1)


def E(n):
    if n < 0:
        return
    lockE.acquire()
    # chushi()
    # str = 'nongsuode'
    # time.sleep(0.1)
    # input.key_autinput(str)
    # time.sleep(1)
    # directkeys.space()
    # time.sleep(2)
    # str = 'chun'
    # time.sleep(0.1)
    # input.key_autinput(str)
    # time.sleep(1)
    # directkeys.space()
    # time.sleep(2)
    # directkeys.enter()
    # time_start = time.time()
    # time.sleep(0.01)
    # mouse.first()
    # time.sleep(0.01)
    # a = search.number()
    # print(a)
    # mouse.second()
    # time.sleep(0.01)
    # if 40 <a<= 1650000:
    #     denter()
    #     time_end = time.time()
    #     print(time_end - time_start)
    #     time.sleep(1)
    #     directkeys.esc()
    #     time.sleep(3)
    # else:
    #     time_end = time.time()
    #     print(time_end - time_start)
    #     time.sleep(1)
    #     directkeys.esc()
    #     time.sleep(3)
    time.sleep(3)
    lockF.release()
    time.sleep(1)
    E(n - 1)


def F(n):
    if n < 0:
        return
    lockF.acquire()
    chushi()
    str = 'shangji'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    str = 'yuansu'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 40< a <= 380:
        print("上级元素", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    time.sleep(3)
    lockG.release()
    time.sleep(1)
    F(n - 1)

def G(n):
    if n < 0:
        return
    lockG.acquire()
    chushi()
    str = 'shujuxinp'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 90< a <= 900:
        print("数据芯片", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    time.sleep(3)
    lockH.release()
    time.sleep(1)
    G(n - 1)


def H(n):
    if n < 0:
        return
    lockH.acquire()
    chushi()
    str = 'moshas'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 60< a <= 450:
        print("魔刹石", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    time.sleep(3)
    lockI.release()
    time.sleep(1)
    H(n - 1)



def I(n):
    if n < 0:
        return
    lockI.acquire()
    chushi()
    str = 'danshengzhiy'
    time.sleep(0.1)
    input.key_autinput(str)
    time.sleep(1)
    directkeys.space()
    time.sleep(2)
    directkeys.enter()
    time_start = time.time()
    time.sleep(0.01)
    mouse.first()
    time.sleep(0.01)
    a = search.number()
    time.sleep(0.01)
    mouse.second()
    time.sleep(0.01)
    if 90<a<= 900:
        print("诞生之芽", a)
        denter()
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    else:
        time_end = time.time()
        print(time_end - time_start)
        time.sleep(1)
        directkeys.esc()
        time.sleep(3)
    time.sleep(3)
    lockJ.release()
    time.sleep(1)
    I(n - 1)
def J(n):
    if n < 0:
        return
    lockJ.acquire()
    #   chushi()
    #   str = 'maodun'
    #   time.sleep(0.1)
    #   input.key_autinput(str)
    #   time.sleep(1)
    #   directkeys.space()
    #   time.sleep(2)
    #   directkeys.enter()
    #   time_start = time.time()
    #   time.sleep(0.01)
    #   mouse.first()
    #   time.sleep(0.01)
    #   a = search.number()
    #   print(a)
    #   mouse.second()
    #   time.sleep(0.01)
    #   if 40 <a<= 100000:
    #       denter()
    #       time_end = time.time()
    #       print(time_end - time_start)
    #       time.sleep(1)
    #       directkeys.esc()
    #       time.sleep(3)
    #   else:
    #       time_end = time.time()
    #       print(time_end - time_start)
    #       time.sleep(1)
    #       directkeys.esc()
    #       time.sleep(3)
    time.sleep(3)
    lockA.release()
    time.sleep(1)
    J(n-1)

time.sleep(8)
lockB.acquire()
lockC.acquire()
lockD.acquire()
lockE.acquire()
lockF.acquire()
lockG.acquire()
lockH.acquire()
lockI.acquire()
lockJ.acquire()
t1=threading.Thread(target=A,args=(100,))
t2=threading.Thread(target=B,args=(100,))
t3=threading.Thread(target=C,args=(100,))
t4=threading.Thread(target=D,args=(100,))
t5=threading.Thread(target=E,args=(100,))
t6=threading.Thread(target=F,args=(100,))
t7=threading.Thread(target=G,args=(100,))
t8=threading.Thread(target=H,args=(100,))
t9=threading.Thread(target=I,args=(100,))
t10=threading.Thread(target=J,args=(100,))
t1.start()
t2.start()
t3.start()
t4.start()
t5.start()
t6.start()
t7.start()
t8.start()
t9.start()
t10.start()
t1.join()
t2.join()
t3.join()
t4.join()
t5.join()
t6.join()
t7.join()
t8.join()
t9.join()
t10.join()
